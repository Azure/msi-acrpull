// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/msi-acrpull/pkg/authorizer (interfaces: MIARMTokenRetriever,WIARMTokenRetriever,ACRTokenExchanger)

// Package mock_authorizer is a generated GoMock package.
package mock_authorizer

import (
	context "context"
	reflect "reflect"

	types "github.com/Azure/msi-acrpull/pkg/authorizer/types"
	gomock "github.com/golang/mock/gomock"
)

// MockMIARMTokenRetriever is a mock of MIARMTokenRetriever interface.
type MockMIARMTokenRetriever struct {
	ctrl     *gomock.Controller
	recorder *MockMIARMTokenRetrieverMockRecorder
}

// MockMIARMTokenRetrieverMockRecorder is the mock recorder for MockMIARMTokenRetriever.
type MockMIARMTokenRetrieverMockRecorder struct {
	mock *MockMIARMTokenRetriever
}

// NewMockMIARMTokenRetriever creates a new mock instance.
func NewMockMIARMTokenRetriever(ctrl *gomock.Controller) *MockMIARMTokenRetriever {
	mock := &MockMIARMTokenRetriever{ctrl: ctrl}
	mock.recorder = &MockMIARMTokenRetrieverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMIARMTokenRetriever) EXPECT() *MockMIARMTokenRetrieverMockRecorder {
	return m.recorder
}

// MIAcquireARMToken mocks base method.
func (m *MockMIARMTokenRetriever) MIAcquireARMToken(arg0, arg1 string) (types.AccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MIAcquireARMToken", arg0, arg1)
	ret0, _ := ret[0].(types.AccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MIAcquireARMToken indicates an expected call of MIAcquireARMToken.
func (mr *MockMIARMTokenRetrieverMockRecorder) MIAcquireARMToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MIAcquireARMToken", reflect.TypeOf((*MockMIARMTokenRetriever)(nil).MIAcquireARMToken), arg0, arg1)
}

// MockWIARMTokenRetriever is a mock of WIARMTokenRetriever interface.
type MockWIARMTokenRetriever struct {
	ctrl     *gomock.Controller
	recorder *MockWIARMTokenRetrieverMockRecorder
}

// MockWIARMTokenRetrieverMockRecorder is the mock recorder for MockWIARMTokenRetriever.
type MockWIARMTokenRetrieverMockRecorder struct {
	mock *MockWIARMTokenRetriever
}

// NewMockWIARMTokenRetriever creates a new mock instance.
func NewMockWIARMTokenRetriever(ctrl *gomock.Controller) *MockWIARMTokenRetriever {
	mock := &MockWIARMTokenRetriever{ctrl: ctrl}
	mock.recorder = &MockWIARMTokenRetrieverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWIARMTokenRetriever) EXPECT() *MockWIARMTokenRetrieverMockRecorder {
	return m.recorder
}

// WIAcquireARMToken mocks base method.
func (m *MockWIARMTokenRetriever) WIAcquireARMToken(arg0 context.Context, arg1, arg2 string) (types.AccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WIAcquireARMToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(types.AccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WIAcquireARMToken indicates an expected call of WIAcquireARMToken.
func (mr *MockWIARMTokenRetrieverMockRecorder) WIAcquireARMToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WIAcquireARMToken", reflect.TypeOf((*MockWIARMTokenRetriever)(nil).WIAcquireARMToken), arg0, arg1, arg2)
}

// MockACRTokenExchanger is a mock of ACRTokenExchanger interface.
type MockACRTokenExchanger struct {
	ctrl     *gomock.Controller
	recorder *MockACRTokenExchangerMockRecorder
}

// MockACRTokenExchangerMockRecorder is the mock recorder for MockACRTokenExchanger.
type MockACRTokenExchangerMockRecorder struct {
	mock *MockACRTokenExchanger
}

// NewMockACRTokenExchanger creates a new mock instance.
func NewMockACRTokenExchanger(ctrl *gomock.Controller) *MockACRTokenExchanger {
	mock := &MockACRTokenExchanger{ctrl: ctrl}
	mock.recorder = &MockACRTokenExchangerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockACRTokenExchanger) EXPECT() *MockACRTokenExchangerMockRecorder {
	return m.recorder
}

// ExchangeACRAccessToken mocks base method.
func (m *MockACRTokenExchanger) ExchangeACRAccessToken(arg0 types.AccessToken, arg1, arg2 string) (types.AccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeACRAccessToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(types.AccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangeACRAccessToken indicates an expected call of ExchangeACRAccessToken.
func (mr *MockACRTokenExchangerMockRecorder) ExchangeACRAccessToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeACRAccessToken", reflect.TypeOf((*MockACRTokenExchanger)(nil).ExchangeACRAccessToken), arg0, arg1, arg2)
}
