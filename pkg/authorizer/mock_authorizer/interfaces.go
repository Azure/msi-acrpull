// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/msi-acrpull/pkg/authorizer (interfaces: ManagedIdentityARMTokenRetriever,WorkloadIdentityARMTokenRetriever,ACRTokenExchanger)

// Package mock_authorizer is a generated GoMock package.
package mock_authorizer

import (
	context "context"
	reflect "reflect"

	types "github.com/Azure/msi-acrpull/pkg/authorizer/types"
	gomock "github.com/golang/mock/gomock"
)

// MockManagedIdentityARMTokenRetriever is a mock of ManagedIdentityARMTokenRetriever interface.
type MockManagedIdentityARMTokenRetriever struct {
	ctrl     *gomock.Controller
	recorder *MockManagedIdentityARMTokenRetrieverMockRecorder
}

// MockManagedIdentityARMTokenRetrieverMockRecorder is the mock recorder for MockManagedIdentityARMTokenRetriever.
type MockManagedIdentityARMTokenRetrieverMockRecorder struct {
	mock *MockManagedIdentityARMTokenRetriever
}

// NewMockManagedIdentityARMTokenRetriever creates a new mock instance.
func NewMockManagedIdentityARMTokenRetriever(ctrl *gomock.Controller) *MockManagedIdentityARMTokenRetriever {
	mock := &MockManagedIdentityARMTokenRetriever{ctrl: ctrl}
	mock.recorder = &MockManagedIdentityARMTokenRetrieverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagedIdentityARMTokenRetriever) EXPECT() *MockManagedIdentityARMTokenRetrieverMockRecorder {
	return m.recorder
}

// AcquireARMToken mocks base method.
func (m *MockManagedIdentityARMTokenRetriever) AcquireARMToken(arg0, arg1 string) (types.AccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireARMToken", arg0, arg1)
	ret0, _ := ret[0].(types.AccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcquireARMToken indicates an expected call of AcquireARMToken.
func (mr *MockManagedIdentityARMTokenRetrieverMockRecorder) AcquireARMToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireARMToken", reflect.TypeOf((*MockManagedIdentityARMTokenRetriever)(nil).AcquireARMToken), arg0, arg1)
}

// MockWorkloadIdentityARMTokenRetriever is a mock of WorkloadIdentityARMTokenRetriever interface.
type MockWorkloadIdentityARMTokenRetriever struct {
	ctrl     *gomock.Controller
	recorder *MockWorkloadIdentityARMTokenRetrieverMockRecorder
}

// MockWorkloadIdentityARMTokenRetrieverMockRecorder is the mock recorder for MockWorkloadIdentityARMTokenRetriever.
type MockWorkloadIdentityARMTokenRetrieverMockRecorder struct {
	mock *MockWorkloadIdentityARMTokenRetriever
}

// NewMockWorkloadIdentityARMTokenRetriever creates a new mock instance.
func NewMockWorkloadIdentityARMTokenRetriever(ctrl *gomock.Controller) *MockWorkloadIdentityARMTokenRetriever {
	mock := &MockWorkloadIdentityARMTokenRetriever{ctrl: ctrl}
	mock.recorder = &MockWorkloadIdentityARMTokenRetrieverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkloadIdentityARMTokenRetriever) EXPECT() *MockWorkloadIdentityARMTokenRetrieverMockRecorder {
	return m.recorder
}

// AcquireARMToken mocks base method.
func (m *MockWorkloadIdentityARMTokenRetriever) AcquireARMToken(arg0 context.Context, arg1, arg2 string) (types.AccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireARMToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(types.AccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcquireARMToken indicates an expected call of AcquireARMToken.
func (mr *MockWorkloadIdentityARMTokenRetrieverMockRecorder) AcquireARMToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireARMToken", reflect.TypeOf((*MockWorkloadIdentityARMTokenRetriever)(nil).AcquireARMToken), arg0, arg1, arg2)
}

// MockACRTokenExchanger is a mock of ACRTokenExchanger interface.
type MockACRTokenExchanger struct {
	ctrl     *gomock.Controller
	recorder *MockACRTokenExchangerMockRecorder
}

// MockACRTokenExchangerMockRecorder is the mock recorder for MockACRTokenExchanger.
type MockACRTokenExchangerMockRecorder struct {
	mock *MockACRTokenExchanger
}

// NewMockACRTokenExchanger creates a new mock instance.
func NewMockACRTokenExchanger(ctrl *gomock.Controller) *MockACRTokenExchanger {
	mock := &MockACRTokenExchanger{ctrl: ctrl}
	mock.recorder = &MockACRTokenExchangerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockACRTokenExchanger) EXPECT() *MockACRTokenExchangerMockRecorder {
	return m.recorder
}

// ExchangeACRAccessToken mocks base method.
func (m *MockACRTokenExchanger) ExchangeACRAccessToken(arg0 types.AccessToken, arg1, arg2 string) (types.AccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeACRAccessToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(types.AccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangeACRAccessToken indicates an expected call of ExchangeACRAccessToken.
func (mr *MockACRTokenExchangerMockRecorder) ExchangeACRAccessToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeACRAccessToken", reflect.TypeOf((*MockACRTokenExchanger)(nil).ExchangeACRAccessToken), arg0, arg1, arg2)
}
